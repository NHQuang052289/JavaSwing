/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.CostDAO;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.CostClass;

/**
 *
 * @author qn052
 */
public class FrameChiPhi extends javax.swing.JFrame {

    /**
     * Creates new form FrameDichVu
     */
    private ArrayList<CostClass> list;
    private final ArrayList<CostClass> listNew=new ArrayList<>();
    DefaultTableModel model;
    CostDAO daoService = new CostDAO();
    int editIndex;
    EditCostFrm edit = new EditCostFrm(this, rootPaneCheckingEnabled);
    
    public FrameChiPhi() {
        initComponents();
        this.setLocationRelativeTo(null);
        list = new CostDAO().getListService();
        model = (DefaultTableModel) myTable.getModel();
        model.setColumnIdentifiers(new Object[]{
            "Room", "Time", "Electric", "Water", "Security", "Parking", "Cleaning", "Other"
        });
        showTable();
    }
    
    public void showTable(){
        list.forEach(s ->{
            model.addRow(new Object[]{
                s.getRoom(), s.getTime(), s.getEletric(), s.getWater(), s.getSecurity(), s.getParking(), s.getCleaning(), s.getOther()
            });
        });
    }
    public void showSearch(ArrayList<CostClass>listt){
        for(int i = 0; i < listt.size(); i++)
        {
            model.addRow(new Object[]{
                listt.get(i).getRoom(), listt.get(i).getTime(), list.get(i).getEletric(), listt.get(i).getWater(),
                listt.get(i).getSecurity(), listt.get(i).getParking(), listt.get(i).getCleaning(), listt.get(i).getOther()
            });
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtRoom = new javax.swing.JTextField();
        txtTime = new javax.swing.JTextField();
        txtElectric = new javax.swing.JTextField();
        txtWater = new javax.swing.JTextField();
        txtSecurity = new javax.swing.JTextField();
        txtParking = new javax.swing.JTextField();
        txtCleaning = new javax.swing.JTextField();
        txtOther = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        myTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Service Management");

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/baseline_home_black_18dp.png"))); // NOI18N
        btnBack.setText("Home Page");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel1.setText("Room:");

        jLabel2.setText("Time:");

        jLabel3.setText("Electric:");

        jLabel4.setText("Water:");

        jLabel5.setText("Security:");

        jLabel6.setText("Parking:");

        jLabel7.setText("Cleaning:");

        jLabel8.setText("Other:");

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.png"))); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/restart.png"))); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xoa.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tim.png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edit2.png"))); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        myTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room", "Time", "Electric", "Water", "Security", "Parking", "Cleaning", "Other"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(myTable);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dichvu.png"))); // NOI18N
        jLabel9.setText("Cost Management");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/danhsach.png"))); // NOI18N
        jButton1.setText("List");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(17, 17, 17)
                                .addComponent(txtSecurity))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addGap(18, 18, 18)
                                .addComponent(btnRefresh))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtWater, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                                    .addComponent(txtElectric)
                                    .addComponent(txtTime)
                                    .addComponent(txtRoom)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtOther)
                                    .addComponent(txtCleaning)
                                    .addComponent(txtParking))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnDelete)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearch)
                                .addGap(18, 18, 18)
                                .addComponent(btnEdit)
                                .addGap(29, 29, 29)
                                .addComponent(jButton1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(210, 210, 210)
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(jLabel9))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtElectric, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtWater, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtSecurity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtParking, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtCleaning, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtOther, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnRefresh)
                    .addComponent(btnDelete)
                    .addComponent(btnSearch)
                    .addComponent(btnEdit)
                    .addComponent(jButton1))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        new TrangChu().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        CostClass s = new CostClass();
        
        s.setRoom(txtRoom.getText());
        s.setTime(txtTime.getText());
        s.setEletric(txtElectric.getText());
        s.setWater(txtWater.getText());
        s.setSecurity(txtSecurity.getText());
        s.setParking(txtParking.getText());
        s.setCleaning(txtCleaning.getText());
        s.setOther(txtOther.getText());
        
        if(new CostDAO().addService(s)){
            JOptionPane.showMessageDialog(rootPane, "Add room success!");
            list.add(s);
            showResult();
        }else{
            JOptionPane.showMessageDialog(rootPane, "This room already exists!");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        txtRoom.setText("");
        txtTime.setText("");
        txtElectric.setText("");
        txtWater.setText("");
        txtSecurity.setText("");
        txtParking.setText("");
        txtCleaning.setText("");
        txtOther.setText("");
        
        model.setRowCount(0);
        showTable();
        listNew.clear();
        JOptionPane.showMessageDialog(rootPane, "Refreshed!");
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int removeIndex = myTable.getSelectedRow();
        if(removeIndex == -1){
            JOptionPane.showMessageDialog(rootPane, "Select one row, please!");
        }else if(list.isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "No information to delete!");
        }else{
            int confirm = JOptionPane.showConfirmDialog(this, "Do you want to delete this room?");
            if(confirm == 0){
                if(!listNew.isEmpty())
                {
                    daoService.deleteService(listNew.get(removeIndex).getRoom());
                    listNew.remove(removeIndex);
                }else{
                    daoService.deleteService(list.get(removeIndex).getRoom());
                    list.remove(removeIndex);
                }
                
                list.clear();
                list = new CostDAO().getListService();
                listNew.clear();
            }
            model.setRowCount(0);
            showTable();
        }        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String keyWord = JOptionPane.showInputDialog(this, "Key Word:");
       // ArrayList<ServiceClass> listSearch = new ArrayList<>();
       listNew.clear();
        if(keyWord.length() > 0 && keyWord != null){
            for(int i = 0; i < list.size(); i++)
            {
                if(list.get(i).getRoom().contains(keyWord) || list.get(i).getTime().contains(keyWord)
                        || list.get(i).getWater().contains(keyWord) || list.get(i).getEletric().contains(keyWord)
                        || list.get(i).getSecurity().contains(keyWord) || list.get(i).getParking().contains(keyWord)
                        || list.get(i).getCleaning().contains(keyWord) || list.get(i).getOther().contains(keyWord))
                    listNew.add(list.get(i));
            }
            model.setRowCount(0);
            showSearch(listNew);
        }else{
            JOptionPane.showMessageDialog(rootPane, "Please write some words");
            model.setRowCount(0);
            showTable();
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
       editIndex = myTable.getSelectedRow();
        if(editIndex == -1){
            JOptionPane.showMessageDialog(rootPane, "Select one row, please!");
        }else if(list.isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "No information to delete!");
        }else{
            int confirm = JOptionPane.showConfirmDialog(this, "Do you want to edit?");
            if(confirm == 0){     
                if(!listNew.isEmpty())
                {
                    edit.setEditData(listNew.get(editIndex));
                    edit.setVisible(true); 
                }else{
                    edit.setEditData(list.get(editIndex));
                    edit.setVisible(true);                     
                }
            }
        }        
        
    }//GEN-LAST:event_btnEditActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        FrameList listTable = new FrameList();
        listTable.setLocationRelativeTo(null);
        listTable.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed
    public void showResult(){
        CostClass s =list.get(list.size() - 1);
        model.addRow(new Object[]{
            s.getRoom(), s.getTime(), s.getEletric(), s.getWater(), s.getSecurity(), s.getParking(), s.getCleaning(), s.getOther()
        });
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameChiPhi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameChiPhi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameChiPhi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameChiPhi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameChiPhi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable myTable;
    private javax.swing.JTextField txtCleaning;
    private javax.swing.JTextField txtElectric;
    private javax.swing.JTextField txtOther;
    private javax.swing.JTextField txtParking;
    private javax.swing.JTextField txtRoom;
    private javax.swing.JTextField txtSecurity;
    private javax.swing.JTextField txtTime;
    private javax.swing.JTextField txtWater;
    // End of variables declaration//GEN-END:variables

    void updateService(CostClass s) {
        s = new CostClass();
        
        String roomEdit = edit.getTxtRoom().getText();
        String timeEdit = edit.getTxtTime().getText();
        String electricEdit = edit.getTxtElectric().getText();
        String waterEdit = edit.getTxtWater().getText();
        String securityEdit = edit.getTxtSecurity().getText();
        String parkingEdit = edit.getTxtParking().getText();
        String cleaningEdit = edit.getTxtCleaning().getText();
        String otherEdit = edit.getTxtOther().getText();
        
        s.setRoom(roomEdit);
        s.setTime(timeEdit);
        s.setEletric(electricEdit);
        s.setWater(waterEdit);
        s.setSecurity(securityEdit);
        s.setParking(parkingEdit);
        s.setCleaning(cleaningEdit);
        s.setOther(otherEdit);
        if(!listNew.isEmpty()){
            daoService.editService(listNew.get(editIndex).getRoom(), s);   
        }else{
            daoService.editService(list.get(editIndex).getRoom(), s);
        }
        
        //listNew.set(editIndex, s);
        list.clear();
        list = new CostDAO().getListService(); 
        model.setRowCount(0);
        showTable();
               
    }
}
